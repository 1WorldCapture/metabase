name: E2E Tests

on:
  push:
    branches:
      - 'gha-test'

jobs:
  e2e-tests:
    runs-on: buildjet-2vcpu-ubuntu-2004
    timeout-minutes: 30
    name: e2e-tests-${{ matrix.folder }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      ENTERPRISE_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        edition: [oss, ee]
        folder:
          - "custom-column"
          - "dashboard-filters"
          - "dashboard-filters-sql"
          - "downloads"
          - "moderation"
          - "permissions"
    services:
      maildev:
        image: maildev/maildev
        ports:
          - "80:80"
          - "25:25"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      postgres-sample:
        image: metabase/qa-databases:postgres-sample-12
        ports:
          - "5432:5432"
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mongo-sample:
        image: metabase/qa-databases:mongo-sample-4.0
        ports:
          - 27017:27017
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      mysql-sample:
        image: metabase/qa-databases:mysql-sample-8
        ports:
          - 3306:3306
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
    - uses: actions/download-artifact@v2
      name: Retrieve uberjar artifact for ${{ matrix.edition }}
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Get the version info
      run: |
        jar xf target/uberjar/metabase.jar version.properties
        mv version.properties resources/
    - name: Launch uberjar
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
    - run: yarn run test-cypress-no-build --folder ${{ matrix.folder }}
      name: Run Cypress tests on ${{ matrix.folder }}
      env:
        TERM: xterm
    - name: Upload Cypress recording upon failure
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-recording-${{ matrix.folder }}-${{ matrix.edition }}
        path: ./cypress
        if-no-files-found: ignore
