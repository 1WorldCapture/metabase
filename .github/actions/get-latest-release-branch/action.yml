name: Get latest release branch

outputs:
  branch-name:
    description: The name of the release branch
    value: ${{ steps.get-latest-release-branch.outputs.branch-name }}
  branch-version:
    description: The major version of the current release branch
    value: ${{ steps.get-latest-release-branch.outputs.branch-version }}
  branch-delta:
    description: Number of steps behind the current release branch the current branch is
    value: ${{ steps.get-latest-release-branch.outputs.branch-delta }}

runs:
  using: "composite"
  steps:
    - uses: actions/github-script@v6
      id: get-latest-release-branch
      with:
        result-encoding: string
        script: |
          const releaseBranches = await github.rest.git.listMatchingRefs({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "heads/release-x.",
          });

          const getVersionFromBranch = branch => {
            const match = branch.match(/release-x\.(.*?)\.x$/);
            return match && parseInt(match[1]);
          };
          const latestReleaseBranch = releaseBranches.data
            .filter(branch => getVersionFromBranch(branch.ref) !== null)
            .reduce(
              (prev, current) =>
                getVersionFromBranch(prev.ref) > getVersionFromBranch(current.ref)
                  ? prev
                  : current,
              { ref: "" },
            );
          const latestReleaseBranchName = latestReleaseBranch.ref.replace(
            /^refs\/heads\//,
            "",
          );

          console.log(`Latest release branch: ${latestReleaseBranchName}`);

          const latestReleaseBranchVersion = parseInt(latestReleaseBranchName.split('.')[1]);
          
          console.log(`Latest major release version: ${latestReleaseBranchVersion}`);
          
          targetBranchName = context.payload.pull_request?.base?.ref
          console.log(`Target branch name is ${targetBranchName}.`);
          
          const currentBranchName = context.ref.split('/').pop();
          const regexPattern = /^release-([x\d]+)\.(\d+)\.([x\d]+)$/;

          branchDelta = 0;
          const match = currentBranchName.match(regexPattern);
          if (match) {
            branchReleaseVersion = parseInt(match[2]);
            console.log(`Current Branch ${currentBranchName} release version is ${branchReleaseVersion}.`);
            branchDelta = latestReleaseBranchVersion - branchReleaseVersion
          console.log(`Current Branch is ${branchDelta} versions behind current release.`);
          } else {
            console.log(`Current Branch ${currentBranchName} is not a release branch.`);
          }

          return {
            'branch-name': latestReleaseBranchName,
            'branch-version': latestReleaseBranchVersion,
            'branch-delta': branchDelta
          };
